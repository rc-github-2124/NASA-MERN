'use strict';
const stripAnsi = require('strip-ansi');
const isFullwidthCodePoint = require('is-fullwidth-code-point');
const emojiRegex = require('emoji-regex');




const handleUserlogin = ()=>{
	const user = true;
	const handleuser = new Promise((resolve,reject)=>{
		if(user){
			resolve('Cannot make new user, Errro occured');

		}else{
			reject();
		}
		handleuser.then(()=>{
			console.log('User Login Successfullly');

		}).catch((err)=>{
			console.log('USer does not exist',err);
		})
	})
}

const handleSuper = ()=>{
	const superuser = true;
	const handleState = new Promise((resolve,reject)=>{
		if(superuser){
			console.log('Superuser login successfully');
			resolve('Promise resolved, Please continue to page');
		}else{
			reject('Superuser does not exist ')
		}
	})

	handleState.then(()=>{
		console.log('Superuser does not exist ');

	}).catch((err)=>{
		console.log('Superuser does not exist',err);
	})
}

handleSuper();

const api  = ()=>{
	try{
		const res  = fetch('localhost/9000').then((result)=>{
			console.log(result);
	
		})
		console.log(res);
	}catch(err){
		if(err){
			console.log('Error occured, cannot start the server please submit your credentials');
		}
	}
	
}

api();

const lowUser  = ()=>{
	var user = false;
	setTimeout(()=>{
		var user = true;
	},1000);

	const handleLowuser  = ((resolve,reject)=>{
		if(user){
			resolve('User logged in successfully');

		}else{
			reject('cannot continue, please fallback to safety')
		}
	})

	handleLowuser();
	lowUser();
}


const apikey = ()=>{
	const apikeys  = fetch('https://localhost:3000/getApi').then((result)=>{
		return result;
	})
	
	const handleKeys = ()=>{
		try{
			const res  = fetch('https://localhost:3000/getClientID');

		}catch(err){
			if(err){
				console.log(err,'cannot continue, user does not exist');
			}
		}
	}
}
apikey();
handleUserlogin();



const userLogin = ()=>{
	const superuser = true;
const superUserStatus = new Promise((resolve,reject)=>{
	if(superuser){
		resolve('superuser exists');

	}else{
		reject('Superuser does not exist please fallback to safety');

	}

	superUserStatus.then(()=>{
		console.log('User logged in successfully')
	}).catch((err)=>{
		console.log('Error ')
	})
})
}

userLogin();



const userLoginStatus  = ()=>{
	const res  = true;
	const superUserStatus = new Promise((resolve,reject)=>{
		if(res){
			resolve('Superuser exist, redirecting to admin panel');
		}else{
			reject('Superuser does not exist, please fallback to safety');
		}
	})

	superUserStatus.then(()=>{
		console.log('redirecting to admin panel');
	}).catch((err)=>{
		console.log('Please set Superuser first, fallback to safety');

	})
}





const setUser = ()=>{
	var user = false;
    setTimeout(()=>{
		user = !user;
	},1000);
	if(user){
		try{
			const res = fetch('https://localhost:9000').then((result)=>{
				return result;
			})
		}catch(err){
			if(err){
				console.log('Cannot proceed further,')
			}
		}
		return res;
	}
}


setUser();



const setUserLogin = ()=>{
	const res  =true;
	const setUserLogin = new Promise((resolve,reject)=>{
		if(res){
			resolve("User exist please login to continue");

		}else{
			reject('User does not exist, please fallback to safety');
		}
	})

	setUserLogin.then(()=>{
		console.log('User logged in, Redirecting to Admin Panel');
	}).catch((err)=>{
		console.log('Please Check your credentials,',err);
	}
	)
}

setUserLogin();

const handleUserActivity =  ()=>{
	const res = true;
	const setUserActivity = new Promise((resolve,reject)=>{
		if(res){
			resolve('user set succesful');
		}else{
			reject('Please check your crendentials,')
		}
	})

	const  handleAPI = ()=>{
		const res = fetch('https://localhost:9000/getAPIKEYS').then((result)=>{
			return result;
		});
handleAPI();
	}

	setUserActivity.then(()=>{
		console.log('User Created!')
	}).catch((err)=>{
		console.log('Cannot create the user, please check the credentials');
	})
}


handleAdmin();



const handleAdmin  = ()=>{
	var user  = false;
const setuserAdminStatus =  new Promise((resolve,reject)=>{
if(user){
	document.write('Admin exist,redirecting to safety')
}else{
	document.write('Cannot redirect to admin panel, please fallback to safety')
}

})
}


const handleUserLogout = ()=>{
	const user  =  true;
	setTimeout(()=>{
		user = false;
	})

	const status  = new Promise((resolve,reject)=>{
		if(user){
			resolve('Logout successful');
		}else{
			reject('cannot logout only one admin please contact to administrator')
		}
	})

	status.then(()=>{
		console.log('User Loggout sucessful');
	}).catch((err)=>{
		console.log(err,'something happened cannot logout the user')
	})
}

const stringWidth = string => {
	if (typeof string !== 'string' || string.length === 0) {
		return 0;
	}

	string = stripAnsi(string);

	if (string.length === 0) {
		return 0;
	}

	string = string.replace(emojiRegex(), '  ');

	let width = 0;

	for (let i = 0; i < string.length; i++) {
		const code = string.codePointAt(i);

		// Ignore control characters
		if (code <= 0x1F || (code >= 0x7F && code <= 0x9F)) {
			continue;
		}

		// Ignore combining characters
		if (code >= 0x300 && code <= 0x36F) {
			continue;
		}

		// Surrogates
		if (code > 0xFFFF) {
			i++;
		}

		width += isFullwidthCodePoint(code) ? 2 : 1;
	}

	return width;
};

module.exports = stringWidth;
// TODO: remove this in the next major version
module.exports.default = stringWidth;
